use std::fmt;

pub enum Instruction {
    NOP,
    CLS,
    VBLNK,
    BGC,
    SPR,
    DRW0,
    DRW1,
    RND,
    FLIP0,
    FLIP1,
    FLIP2,
    FLIP3,
    SND0,
    SND1,
    SND2,
    SND3,
    SNP,
    SNG,
    JMP0,
    JMC,
    JX,
    JME,
    CALL0,
    RET,
    JMP1,
    CX,
    CALL1,
    LDI0,
    LDI1,
    LDM0,
    LDM1,
    MOV,
    STM0,
    STM1,
    ADDI,
    ADD0,
    ADD1,
    SUBI,
    SUB0,
    SUB1,
    CMPI,
    CMP,
    ANDI,
    AND0,
    AND1,
    TSTI,
    TST,
    ORI,
    OR0,
    OR1,
    XORI,
    XOR0,
    XOR1,
    MULI,
    MUL0,
    MUL1,
    DIVI,
    DIV0,
    DIV1,
    MODI,
    MOD0,
    MOD1,
    REMI,
    REM0,
    REM1,
    SHL0,
    SHR0,
    SAL0,
    SAR0,
    SHL1,
    SHR1,
    SAL1,
    SAR1,
    PUSH,
    POP,
    PUSHALL,
    POPALL,
    PUSHF,
    POPF,
    PAL0,
    PAL1,
    NOTI,
    NOT0,
    NOT1,
    NEGI,
    NEG0,
    NEG1,
}

impl Instruction {
    pub fn decode(opcode: u32) -> Result<Instruction, &'static str> {
        let b3 = (opcode & 0xFF000000 >> 24) as u8;

        match b3 {
            0x00 => Ok(Instruction::NOP),
            0x01 => Ok(Instruction::CLS),
            0x02 => Ok(Instruction::VBLNK),
            0x03 => Ok(Instruction::BGC),
            0x04 => Ok(Instruction::SPR),
            0x05 => Ok(Instruction::DRW0),
            0x06 => Ok(Instruction::DRW1),
            0x07 => Ok(Instruction::RND),
            // 0x08 => Ok(Instruction::FLIP0),
            0x09 => Ok(Instruction::SND0),
            0x0A => Ok(Instruction::SND1),
            0x0B => Ok(Instruction::SND2),
            0x0C => Ok(Instruction::SND3),
            0x0D => Ok(Instruction::SNP),
            0x0E => Ok(Instruction::SNG),

            0x10 => Ok(Instruction::JMP0),
            0x11 => Ok(Instruction::JMC),
            0x12 => Ok(Instruction::JX),
            0x13 => Ok(Instruction::JME),
            0x14 => Ok(Instruction::CALL0),
            0x15 => Ok(Instruction::RET),
            0x16 => Ok(Instruction::JMP1),
            0x17 => Ok(Instruction::CX),
            0x18 => Ok(Instruction::CALL1),

            0x20 => Ok(Instruction::LDI0),
            0x21 => Ok(Instruction::LDI1),
            0x22 => Ok(Instruction::LDM0),
            0x23 => Ok(Instruction::LDM1),
            0x24 => Ok(Instruction::MOV),

            0x30 => Ok(Instruction::STM0),
            0x31 => Ok(Instruction::STM1),

            0x40 => Ok(Instruction::ADDI),
            0x41 => Ok(Instruction::ADD0),
            0x42 => Ok(Instruction::ADD1),

            0x50 => Ok(Instruction::SUBI),
            0x51 => Ok(Instruction::SUB0),
            0x52 => Ok(Instruction::SUB1),
            0x53 => Ok(Instruction::CMPI),
            0x54 => Ok(Instruction::CMP),

            0x60 => Ok(Instruction::ANDI),
            0x61 => Ok(Instruction::AND0),
            0x62 => Ok(Instruction::AND1),
            0x63 => Ok(Instruction::TSTI),
            0x64 => Ok(Instruction::TST),

            0x70 => Ok(Instruction::ORI),
            0x71 => Ok(Instruction::OR0),
            0x72 => Ok(Instruction::OR1),

            0x80 => Ok(Instruction::XORI),
            0x81 => Ok(Instruction::XOR0),
            0x82 => Ok(Instruction::XOR1),

            0x90 => Ok(Instruction::MULI),
            0x91 => Ok(Instruction::MUL0),
            0x92 => Ok(Instruction::MUL1),

            0xA0 => Ok(Instruction::DIVI),
            0xA1 => Ok(Instruction::DIV0),
            0xA2 => Ok(Instruction::DIV1),
            0xA3 => Ok(Instruction::MODI),
            0xA4 => Ok(Instruction::MOD0),
            0xA5 => Ok(Instruction::MOD1),
            0xA6 => Ok(Instruction::REMI),
            0xA7 => Ok(Instruction::REM0),
            0xA8 => Ok(Instruction::REM1),

            0xB0 => Ok(Instruction::SHL0),
            0xB1 => Ok(Instruction::SHR0),
            // 0xB0 => Ok(Instruction::SAL0),
            0xB2 => Ok(Instruction::SAR0),
            0xB3 => Ok(Instruction::SHL1),
            0xB4 => Ok(Instruction::SHR1),
            // 0xB3 => Ok(Instruction::SHL1),
            0xB5 => Ok(Instruction::SAR1),

            0xC0 => Ok(Instruction::PUSH),
            0xC1 => Ok(Instruction::POP),
            0xC2 => Ok(Instruction::PUSHALL),
            0xC3 => Ok(Instruction::POPALL),
            0xC4 => Ok(Instruction::PUSHF),
            0xC5 => Ok(Instruction::POPF),

            0xD0 => Ok(Instruction::PAL0),
            0xD1 => Ok(Instruction::PAL1),

            0xE0 => Ok(Instruction::NOTI),
            0xE1 => Ok(Instruction::NOT0),
            0xE2 => Ok(Instruction::NOT1),
            0xE3 => Ok(Instruction::NEGI),
            0xE4 => Ok(Instruction::NEG0),
            0xE5 => Ok(Instruction::NEG1),

            _ => Err(""),
        }
    }
}

impl fmt::Display for Instruction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "")
    }
}